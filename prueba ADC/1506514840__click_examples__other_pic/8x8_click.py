import spidev
import time

spi   = spidev.SpiDev() # matrix on bus 1
spi2  = spidev.SpiDev() # Matrix on bus 2

str_word = [ ]
array_char = [' ',' ','M', 'i', 'k','r', 'o', 'E','l','e','k','t','r','o','n','i','k','a',' ',' ']
lenght = 0

letter = [[ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0 ],   # space -- 32
          [ 0x00, 0x00, 0x0,  0x0,  0x60, 0xfa, 0xfa, 0x60, 0x0,  0x0 ],   # ! -- 33
          [ 0x00, 0x00, 0x0,  0xc0, 0xe0, 0x0,  0x0,  0xe0, 0xc0, 0x0 ],   # " -- 34
          [ 0x00, 0x00, 0x28, 0xfe, 0xfe, 0x28, 0xfe, 0xfe, 0x28, 0x0 ],   # # -- 35
          [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0 ],   # $ -- 36
          [ 0x00, 0x00, 0x62, 0x66, 0xc,  0x18, 0x30, 0x66, 0x46, 0x0 ],   # % -- 37
          [ 0x00, 0x00, 0xc,  0x5e, 0xf2, 0xba, 0xec, 0x5e, 0x12, 0x0 ],   # & -- 38
          [ 0x00, 0x00, 0x0,  0x0,  0x20, 0xe0, 0xc0, 0x0,  0x0,  0x0 ],   # ' -- 39
          [ 0x00, 0x00, 0x0,  0x0,  0x38, 0x7c, 0xc6, 0x82, 0x0,  0x0 ],   # ( -- 40
          [ 0x00, 0x00, 0x0,  0x0,  0x82, 0xc6, 0x7c, 0x38, 0x0,  0x0 ],   # ) -- 41
          [ 0x00, 0x00, 0x10, 0x54, 0x7c, 0x38, 0x38, 0x7c, 0x54, 0x10],   # * -- 42
          [ 0x00, 0x00, 0x0,  0x10, 0x10, 0x7c, 0x7c, 0x10, 0x10, 0x0 ],   # + -- 43
          [ 0x00, 0x00, 0x0,  0x0,  0x0,  0x18, 0x1c, 0x0,  0x0,  0x0 ],   # , -- 44
          [ 0x00, 0x00, 0x0,  0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0 ],   # - -- 45
          [ 0x00, 0x00, 0x0,  0x0,  0x0,  0x6,  0x6,  0x0,  0x0,  0x0 ],   # . -- 46
          [ 0x00, 0x00, 0x6,  0xc,  0x18, 0x30, 0x60, 0xc0, 0x80, 0x0 ],   # / -- 47

          [ 0x00, 0x00, 0x7c, 0xfe, 0x8a, 0x92, 0xa2, 0xfe, 0x7c, 0x00],   # 0 -- 48
          [ 0x00, 0x00, 0x0,  0x2,  0x42, 0xfe, 0xfe, 0x2,  0x2,  0x00],   # 1 -- 49
          [ 0x00, 0x00, 0x42, 0xc6, 0x8e, 0x9a, 0x92, 0xf6, 0x66, 0x00],   # 2 -- 50
          [ 0x00, 0x00, 0x22, 0x63, 0x49, 0x49, 0x49, 0x7F, 0x36, 0x00],   # 3 -- 51
          [ 0x00, 0x00, 0x18, 0x38, 0x68, 0xca, 0xfe, 0xfe, 0xa,  0x0 ],   # 4 -- 52
          [ 0x00, 0x00, 0x0 , 0xf4, 0xf6, 0x92, 0x92, 0x92, 0x9e, 0x8c],   # 5 -- 53
          [ 0x00, 0x00, 0x3c, 0x7e, 0xd2, 0x92, 0x92, 0x1e, 0xc,  0x00],   # 6 -- 54
          [ 0x00, 0x00, 0x0,  0x0,  0x80, 0x9e, 0xb0, 0xe0, 0xc0, 0x0 ],   # 7 -- 55
          [ 0x00, 0x00, 0x6c, 0xfe, 0x92, 0x92, 0x92, 0xfe, 0x6c, 0x0 ],   # 8 -- 56
          [ 0x00, 0x00, 0x60, 0xf2, 0x92, 0x92, 0x96, 0xfc, 0x78, 0x0 ],   # 9 -- 57

          [ 0x00, 0x00, 0x0,  0x0,  0x0,  0x66, 0x66, 0x0,  0x0,  0x0 ],   # : -- 58
          [ 0x00, 0x00, 0x0,  0x0,  0x0,  0x6c, 0x6e, 0x0,  0x0,  0x0 ],   # ; -- 59
          [ 0x00, 0x00, 0x0,  0x0,  0x10, 0x38, 0x6c, 0xc6, 0x82, 0x0 ],   # < -- 60
          [ 0x00, 0x00, 0x0,  0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x0 ],   # = -- 61
          [ 0x00, 0x00, 0x0,  0x82, 0xc6, 0x6c, 0x38, 0x10, 0x0,  0x0 ],   # > -- 62
          [ 0x00, 0x00, 0x40, 0xc0, 0x80, 0x9a, 0xba, 0xe0, 0x40, 0x0 ],   # ? -- 63
          [ 0x00, 0x00, 0x7c, 0xfe, 0x82, 0xba, 0xaa, 0xf8, 0x78, 0x0 ],   # @ -- 64

          [ 0x00, 0x00, 0x3e, 0x7e, 0xd0, 0x90, 0xd0, 0x7e, 0x3e, 0x0 ],   # A -- 65
          [ 0x00, 0x00, 0x82, 0xfe, 0xfe, 0x92, 0x92, 0xfe, 0x6c, 0x0 ],   # B -- 66
          [ 0x00, 0x00, 0x38, 0x7c, 0xc6, 0x82, 0x82, 0xc6, 0x44, 0x0 ],   # C -- 67
          [ 0x00, 0x00, 0x82, 0xfe, 0xfe, 0x82, 0xc6, 0x7c, 0x38, 0x0 ],   # D -- 68
          [ 0x00, 0x00, 0x82, 0xfe, 0xfe, 0x92, 0xba, 0x82, 0xc6, 0x0 ],   # E -- 69
          [ 0x00, 0x00, 0x82, 0xfe, 0xfe, 0x92, 0xb8, 0x80, 0xc0, 0x0 ],   # F -- 70
          [ 0x00, 0x00, 0x38, 0x7c, 0xc6, 0x82, 0x8a, 0xce, 0x4e, 0x0 ],   # G -- 71
          [ 0x00, 0x00, 0xfe, 0xfe, 0x10, 0x10, 0x10, 0xfe, 0xfe, 0x0 ],   # H -- 72
          [ 0x00, 0x00, 0x0,  0x0,  0x82, 0xfe, 0xfe, 0x82, 0x0,  0x0 ],   # I -- 73
          [ 0x00, 0x00, 0x0,  0xe,  0x2,  0x82, 0xfe, 0xfc, 0x80, 0x0 ],   # J -- 74
          [ 0x00, 0x00, 0x82, 0xfe, 0xfe, 0x10, 0x38, 0xee, 0xc6, 0x0 ],   # K -- 75
          [ 0x00, 0x00, 0x82, 0xfe, 0xfe, 0x82, 0x2,  0x6,  0xe,  0x0 ],   # L -- 76
          [ 0x00, 0x00, 0xfe, 0xfe, 0x70, 0x38, 0x70, 0xfe, 0xfe, 0x0 ],   # M -- 77
          [ 0x00, 0x00, 0xfe, 0xfe, 0x60, 0x30, 0x18, 0xfe, 0xfe, 0x0 ],   # N -- 78
          [ 0x00, 0x00, 0x7c, 0xfe, 0x82, 0x82, 0x82, 0xfe, 0x7c, 0x0 ],   # O -- 79
          [ 0x00, 0x00, 0x82, 0xfe, 0xfe, 0x92, 0x90, 0xf0, 0x60, 0x0 ],   # P -- 80
          [ 0x00, 0x00, 0x7c, 0xfe, 0x82, 0x82, 0x87, 0xff, 0x7d, 0x0 ],   # Q -- 81
          [ 0x00, 0x00, 0x82, 0xfe, 0xfe, 0x90, 0x98, 0xfe, 0x66, 0x0 ],   # R -- 82
          [ 0x00, 0x00, 0x44, 0xe6, 0xb2, 0x92, 0x9a, 0xce, 0x44, 0x0 ],   # S -- 83
          [ 0x00, 0x00, 0x0,  0xe0, 0xc2, 0xfe, 0xfe, 0xc2, 0xe0, 0x0 ],   # T -- 84
          [ 0x00, 0x00, 0xfc, 0xfe, 0x2,  0x2,  0x2,  0xfe, 0xfc, 0x0 ],   # U -- 85
          [ 0x00, 0x00, 0xf8, 0xfc, 0x6,  0x2,  0x6,  0xfc, 0xf8, 0x0 ],   # V -- 86
          [ 0x00, 0x00, 0xfc, 0xfe, 0x6,  0x1c, 0x6,  0xfe, 0xfc, 0x0 ],   # W -- 87
          [ 0x00, 0x00, 0xc6, 0xee, 0x38, 0x10, 0x38, 0xee, 0xc6, 0x0 ],   # X -- 88
          [ 0x00, 0x00, 0x0,  0xe0, 0xf2, 0x1e, 0x1e, 0xf2, 0xe0, 0x0 ],   # Y -- 89
          [ 0x00, 0x00, 0xe2, 0xc6, 0x8e, 0x92, 0xb2, 0xe6, 0xce, 0x0 ],   # Z -- 90

          [ 0x00, 0x00, 0x0,  0x0,  0xfe, 0xfe, 0x82, 0x82, 0x0,  0x0 ],   # [ -- 91
          [ 0x00, 0x00, 0x80, 0xc0, 0x60, 0x30, 0x18, 0xc,  0x6,  0x0 ],   # \ -- 92
          [ 0x00, 0x00, 0x0,  0x0,  0x82, 0x82, 0xfe, 0xfe, 0x0,  0x0 ],   # ] -- 93
          [ 0x00, 0x00, 0x10, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x10, 0x0 ],   # ^ -- 94
          [ 0x00, 0x00, 0x1,  0x1,  0x1,  0x1,  0x1,  0x1,  0x1,  0x1 ],   # _ -- 95
          [ 0x00, 0x00, 0x0,  0x0,  0x80, 0xc0, 0x60, 0x20, 0x0,  0x0 ],   # ` -- 96

          [ 0x00, 0x00, 0x4,  0x2e, 0x2a, 0x2a, 0x3c, 0x1e, 0x2,  0x0 ],   # a -- 97
          [ 0x00, 0x00, 0x82, 0xfe, 0xfc, 0x22, 0x22, 0x3e, 0x1c, 0x0 ],   # b -- 98
          [ 0x00, 0x00, 0x1c, 0x3e, 0x22, 0x22, 0x22, 0x36, 0x14, 0x0 ],   # c -- 99
          [ 0x00, 0x00, 0x1c, 0x3e, 0x22, 0xa2, 0xfc, 0xfe, 0x2,  0x0 ],   # d -- 100
          [ 0x00, 0x00, 0x1c, 0x3e, 0x2a, 0x2a, 0x2a, 0x3a, 0x18, 0x0 ],   # e -- 101
          [ 0x00, 0x00, 0x12, 0x7e, 0xfe, 0x92, 0x90, 0xc0, 0x40, 0x0 ],   # f -- 102
          [ 0x00, 0x00, 0x19, 0x3d, 0x25, 0x25, 0x3f, 0x3e, 0x20, 0x0 ],   # g -- 103
          [ 0x00, 0x00, 0x82, 0xfe, 0xfe, 0x30, 0x20, 0x3e, 0x1e, 0x0 ],   # h -- 104
          [ 0x00, 0x00, 0x0,  0x0,  0x22, 0xbe, 0xbe, 0x2,  0x0,  0x0 ],   # i -- 105
          [ 0x00, 0x00, 0x0,  0x6,  0x7,  0x1,  0x1,  0xbf, 0xbe, 0x0 ],   # j -- 106
          [ 0x00, 0x00, 0x82, 0xfe, 0xfe, 0x8,  0x1c, 0x36, 0x22, 0x0 ],   # k -- 107
          [ 0x00, 0x00, 0x0,  0x0,  0x82, 0xfe, 0xfe, 0x2,  0x0,  0x0 ],   # l -- 108
          [ 0x00, 0x00, 0x3e, 0x3e, 0x30, 0x1e, 0x30, 0x3e, 0x1e, 0x0 ],   # m -- 109
          [ 0x00, 0x00, 0x20, 0x3e, 0x1e, 0x20, 0x20, 0x3e, 0x1e, 0x0 ],   # n -- 110
          [ 0x00, 0x00, 0x1c, 0x3e, 0x22, 0x22, 0x22, 0x3e, 0x1c, 0x0 ],   # o -- 111
          [ 0x00, 0x00, 0x21, 0x3f, 0x1f, 0x25, 0x24, 0x3c, 0x18, 0x0 ],   # p -- 112
          [ 0x00, 0x00, 0x18, 0x3c, 0x24, 0x25, 0x1f, 0x3f, 0x21, 0x0 ],   # q -- 113
          [ 0x00, 0x00, 0x22, 0x3e, 0x1e, 0x32, 0x20, 0x30, 0x10, 0x0 ],   # r -- 114
          [ 0x00, 0x00, 0x12, 0x3a, 0x2a, 0x2a, 0x2a, 0x2e, 0x24, 0x0 ],   # s -- 115
          [ 0x00, 0x00, 0x20, 0x20, 0xfc, 0xfe, 0x22, 0x26, 0x4,  0x0 ],   # t -- 116
          [ 0x00, 0x00, 0x3c, 0x3e, 0x2,  0x2,  0x3c, 0x3e, 0x2,  0x0 ],   # u -- 117
          [ 0x00, 0x00, 0x38, 0x3c, 0x6,  0x3,  0x6,  0x3c, 0x38, 0x0 ],   # v -- 118
          [ 0x00, 0x00, 0x3c, 0x3e, 0x6,  0x1c, 0x6,  0x3e, 0x3c, 0x0 ],   # w -- 119
          [ 0x00, 0x00, 0x22, 0x36, 0x1c, 0x8,  0x1c, 0x36, 0x22, 0x0 ],   # x -- 120
          [ 0x00, 0x00, 0x39, 0x3e, 0x5,  0x5,  0x5,  0x3f, 0x3e, 0x0 ],   # y -- 121
          [ 0x00, 0x00, 0x0,  0x32, 0x26, 0x2e, 0x3a, 0x32, 0x26, 0x0 ]]   # z -- 122

def matrix_configurate ( number_bus, decode_mode, intensity, scan_limit, mode ):

   if ( number_bus == 0 ):
         spi.open(0,number_bus)
         spi.writebytes([ 0x09 , decode_mode ])
         spi.writebytes([ 0x0A , intensity ])
         spi.writebytes([ 0x0B , scan_limit ])
         spi.writebytes([ 0x0C , mode ])
   else :
         spi2.open(0,number_bus)
         spi2.writebytes([ 0x09 , decode_mode ])
         spi2.writebytes([ 0x0A , intensity ])
         spi2.writebytes([ 0x0B , scan_limit ])
         spi2.writebytes([ 0x0C , mode ])

matrix_configurate ( 0, 0x00, 0x01, 0x07, 0x01 ) #Conf -- SPI
matrix_configurate ( 1, 0x00, 0x01, 0x07, 0x01 )

def write_one_char(number_bus, str, delay):

    text_write = [ 0 , 0 ]
    com = 8
    position = 0
    while ( position < 9 ):
        i = position
        for x in range ( i, position + 8 ):
           text_write[0] = com
           text_write[1] = str[ x ]
           if( number_bus == 0 ):
               spi.writebytes( text_write )
           else:
               spi2.writebytes( text_write )
           com = com - 1
        com = 8
        position = position + 1
        time.sleep(delay)

def write_scroll_txt(str):

    text_write = [ 0 , 0 ]
    com = 8
    position1 = 0
    position0 = 8
    while (position1 < lenght):

        i = position0
        for x in range ( i, position0 + 8 ):
           text_write[0] = com
           text_write[1] = str[ x ]
           spi2.writebytes( text_write )
           com = com - 1
        com = 8
        position0 = position0 + 1
        i = position1
        for x in range ( i, position1 + 8 ):
           text_write[0] = com
           text_write[1] = str[ x ]
           spi.writebytes( text_write )
           com = com - 1
        com = 8
        position1 = position1 + 1
        time.sleep(0.05)

def buffer( word, array ):

   global str_word
   global array_char
   global lenght
   for i in range(0,len(array)):
       ascii = ord(array[i]) - 32

       for k in range(0,10):
             str_word.append(word[ascii][k])

   lenght = len(str_word)-20
   write_scroll_txt(str_word)
   str_word = [ ]



while True:

     buffer( letter, array_char )
     time.sleep(0.5)
